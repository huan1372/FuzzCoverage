	; NodeDef: {{node Neg}}; Op<name=Neg; signature=x:T -> y:T; attr=T:type,allowed=[DT_BFLOAT16, DT_HALF, DT_FLOAT, DT_DOUBLE, DT_INT8, DT_INT16, DT_INT32, DT_INT64, DT_COMPLEX64, DT_COMPLEX128]> [Op:Neg]
	; NodeDef: {{node Relu}}; Op<name=Relu; signature=features:T -> activations:T; attr=T:type,allowed=[DT_FLOAT, DT_DOUBLE, DT_INT32, DT_UINT8, DT_INT16, DT_INT8, DT_INT64, DT_BFLOAT16, DT_UINT16, DT_HALF, DT_UINT32, DT_UINT64, DT_QINT8]> [Op:Relu]

  • inputs=tf.Tensor(shape=(), dtype=bool)77
  • inputs=tf.Tensor(shape=(), dtype=complex128)77
  • inputs=tf.Tensor(shape=(), dtype=complex64)77
  • inputs=tf.Tensor(shape=(), dtype=int32)77
  • inputs=tf.Tensor(shape=(), dtype=int8)77
  • inputs=tf.Tensor(shape=(), dtype=uint16)77
  • inputs=tf.Tensor(shape=(), dtype=uint32)77
  • inputs=tf.Tensor(shape=(), dtype=uint8)77
  • inputs=tf.Tensor(shape=(0, 0), dtype=int16)77
  • inputs=tf.Tensor(shape=(0, 0, 0, 0), dtype=uint16)77
  • inputs=tf.Tensor(shape=(0, 0, 0, 0, 0, 0), dtype=bool)77
  • inputs=tf.Tensor(shape=(0, 0, 0, 0, 0, 0), dtype=complex128)77
  • inputs=tf.Tensor(shape=(0, 0, 0, 0, 0, 0), dtype=int64)77
  • inputs=tf.Tensor(shape=(0, 0, 0, 0, 0, 0), dtype=uint8)77
  • inputs=tf.Tensor(shape=(0, 0, 0, 0, 0, 0, 0, 0), dtype=bool)77
  • inputs=tf.Tensor(shape=(0, 0, 0, 0, 0, 0, 0, 0), dtype=complex128)77
  • inputs=tf.Tensor(shape=(0, 0, 0, 0, 0, 0, 0, 0), dtype=uint16)77
  • inputs=tf.Tensor(shape=(0, 0, 0, 1), dtype=complex64)77
  • inputs=tf.Tensor(shape=(0, 0, 0, 4, 1, 1, 0), dtype=bool)77
  • inputs=tf.Tensor(shape=(0, 0, 4, 0), dtype=uint16)77
  • inputs=tf.Tensor(shape=(0, 0, 8), dtype=uint16)77
  • inputs=tf.Tensor(shape=(0, 1, 2, 2, 2, 0, 0), dtype=int16)77
  • inputs=tf.Tensor(shape=(0, 2), dtype=uint64)77
  • inputs=tf.Tensor(shape=(0, 6, 6, 6, 0, 0), dtype=int8)77
  • inputs=tf.Tensor(shape=(0,), dtype=bool)77
  • inputs=tf.Tensor(shape=(0,), dtype=complex64)77
  • inputs=tf.Tensor(shape=(0,), dtype=int32)77
  • inputs=tf.Tensor(shape=(0,), dtype=uint16)77
  • inputs=tf.Tensor(shape=(0,), dtype=uint8)77
  • inputs=tf.Tensor(shape=(1, 0), dtype=bool)77
  • inputs=tf.Tensor(shape=(1, 0, 0), dtype=complex128)77
  • inputs=tf.Tensor(shape=(1, 0, 0, 0), dtype=complex64)77
  • inputs=tf.Tensor(shape=(1, 0, 0, 0, 0), dtype=complex64)77
  • inputs=tf.Tensor(shape=(1, 0, 0, 0, 0, 0), dtype=uint16)77
  • inputs=tf.Tensor(shape=(1, 0, 0, 0, 0, 0, 0), dtype=bool)77
  • inputs=tf.Tensor(shape=(1, 0, 0, 0, 0, 0, 0), dtype=complex64)77
  • inputs=tf.Tensor(shape=(1, 0, 0, 0, 0, 0, 0), dtype=int32)77
  • inputs=tf.Tensor(shape=(1, 0, 0, 0, 0, 0, 0), dtype=int8)77
  • inputs=tf.Tensor(shape=(1, 0, 0, 0, 0, 0, 0), dtype=uint16)77
  • inputs=tf.Tensor(shape=(1, 0, 0, 0, 0, 0, 0), dtype=uint64)77
  • inputs=tf.Tensor(shape=(1, 0, 0, 0, 0, 0, 0), dtype=uint8)77
  • inputs=tf.Tensor(shape=(1, 0, 0, 0, 0, 0, 0, 0), dtype=bool)77
  • inputs=tf.Tensor(shape=(1, 0, 0, 1, 0, 4, 0), dtype=bool)77
  • inputs=tf.Tensor(shape=(1, 1), dtype=int8)77
  • inputs=tf.Tensor(shape=(1, 1, 0, 0, 0, 0, 0), dtype=uint16)77
  • inputs=tf.Tensor(shape=(1, 1, 1), dtype=uint16)77
  • inputs=tf.Tensor(shape=(1, 1, 1, 0, 0, 0, 0), dtype=uint16)77
  • inputs=tf.Tensor(shape=(1, 1, 1, 1, 1, 1, 1, 1), dtype=uint16)77
  • inputs=tf.Tensor(shape=(1, 3, 0, 0, 0, 0, 0), dtype=complex64)77
  • inputs=tf.Tensor(shape=(1, 3, 1, 0, 0, 0, 0, 0), dtype=complex128)77
  • inputs=tf.Tensor(shape=(1, 8, 0, 0), dtype=uint8)77
  • inputs=tf.Tensor(shape=(1,), dtype=bool)77
  • inputs=tf.Tensor(shape=(1,), dtype=complex128)77
  • inputs=tf.Tensor(shape=(1,), dtype=complex64)77
  • inputs=tf.Tensor(shape=(1,), dtype=int32)77
  • inputs=tf.Tensor(shape=(1,), dtype=int8)77
  • inputs=tf.Tensor(shape=(1,), dtype=uint16)77
  • inputs=tf.Tensor(shape=(1,), dtype=uint32)77
  • inputs=tf.Tensor(shape=(1,), dtype=uint8)77
  • inputs=tf.Tensor(shape=(2, 0), dtype=int16)77
  • inputs=tf.Tensor(shape=(2, 0), dtype=int8)77
  • inputs=tf.Tensor(shape=(2, 0), dtype=uint32)77
  • inputs=tf.Tensor(shape=(2, 0, 0, 0, 0, 0), dtype=int16)77
  • inputs=tf.Tensor(shape=(2, 0, 4), dtype=uint8)77
  • inputs=tf.Tensor(shape=(2, 1, 0, 0), dtype=uint16)77
  • inputs=tf.Tensor(shape=(2, 2), dtype=int16)77
  • inputs=tf.Tensor(shape=(2, 2), dtype=int8)77
  • inputs=tf.Tensor(shape=(2, 3), dtype=int16)77
  • inputs=tf.Tensor(shape=(2, 6), dtype=uint16)77
  • inputs=tf.Tensor(shape=(2,), dtype=int16)77
  • inputs=tf.Tensor(shape=(2,), dtype=int8)77
  • inputs=tf.Tensor(shape=(3, 0, 0), dtype=bool)77
  • inputs=tf.Tensor(shape=(3, 0, 0, 0, 0, 0, 0), dtype=bool)77
  • inputs=tf.Tensor(shape=(3, 0, 4), dtype=uint16)77
  • inputs=tf.Tensor(shape=(3, 1, 0, 0, 0, 0, 0), dtype=complex64)77
  • inputs=tf.Tensor(shape=(3, 2), dtype=int16)77
  • inputs=tf.Tensor(shape=(3, 2, 0, 4), dtype=bool)77
  • inputs=tf.Tensor(shape=(3, 3, 0), dtype=uint16)77
  • inputs=tf.Tensor(shape=(3, 3, 3), dtype=bool)77
  • inputs=tf.Tensor(shape=(3, 3, 3), dtype=int8)77
  • inputs=tf.Tensor(shape=(3, 3, 3, 3, 3, 3, 3), dtype=bool)77
  • inputs=tf.Tensor(shape=(3, 3, 3, 3, 3, 6), dtype=int32)77
  • inputs=tf.Tensor(shape=(3, 3, 6), dtype=int8)77
  • inputs=tf.Tensor(shape=(3, 3, 6), dtype=uint16)77
  • inputs=tf.Tensor(shape=(3, 6, 0), dtype=bool)77
  • inputs=tf.Tensor(shape=(3,), dtype=uint32)77
  • inputs=tf.Tensor(shape=(3,), dtype=uint8)77
  • inputs=tf.Tensor(shape=(4, 0, 3, 1, 0, 0, 0), dtype=complex64)77
  • inputs=tf.Tensor(shape=(5, 5, 5, 7, 0), dtype=int32)77
  • inputs=tf.Tensor(shape=(5, 5, 5, 7, 2), dtype=int32)77
  • inputs=tf.Tensor(shape=(6, 0, 0), dtype=int32)77
  • inputs=tf.Tensor(shape=(6, 0, 0), dtype=int8)77
  • inputs=tf.Tensor(shape=(6, 0, 0, 0, 0, 0), dtype=int16)77
  • inputs=tf.Tensor(shape=(6, 0, 0, 0, 0, 0), dtype=int8)77
  • inputs=tf.Tensor(shape=(6, 0, 0, 0, 0, 0), dtype=uint8)77
  • inputs=tf.Tensor(shape=(6, 0, 6, 6, 6, 0), dtype=uint16)77
  • inputs=tf.Tensor(shape=(6, 3, 3, 3, 3, 3), dtype=int8)77
  • inputs=tf.Tensor(shape=(6, 6), dtype=complex128)77
  • inputs=tf.Tensor(shape=(6, 6, 0, 0), dtype=complex128)77
  • inputs=tf.Tensor(shape=(6, 6, 0, 0, 0, 0), dtype=int8)77
  • inputs=tf.Tensor(shape=(6, 6, 6, 6, 6, 0), dtype=uint16)77
  • inputs=tf.Tensor(shape=(6,), dtype=uint16)77
  • inputs=tf.Tensor(shape=(6,), dtype=uint32)77
  • inputs=tf.Tensor(shape=(7, 1, 0, 0), dtype=uint16)77
  • inputs=tf.Tensor(shape=(7, 7, 7, 7, 7, 7, 7), dtype=bool)77
  • inputs=tf.Tensor(shape=(8, 0, 1, 0, 0), dtype=int32)77
  • inputs=tf.Tensor(shape=(8, 1, 3), dtype=complex128)77
  • inputs=tf.Tensor(shape=(8,), dtype=uint8)77
Call arguments received by layer "" "                 f"(type PReLU):
Call arguments received by layer "1" "                 f"(type PReLU):
Call arguments received by layer "p_re_lu" "                 f"(type PReLU):
Call arguments received by layer "same" "                 f"(type PReLU):
Call arguments received by layer "sum" "                 f"(type PReLU):
Call arguments received by layer "valid" "                 f"(type PReLU):
Call arguments received by layer "zeros" "                 f"(type PReLU):
Cannot convert the argument `type_value`: '1' to a TensorFlow DType.50
Cannot convert the argument `type_value`: '1' to a TensorFlow DType.75
Cannot convert the argument `type_value`: 'same' to a TensorFlow DType.50
Cannot convert the argument `type_value`: 'same' to a TensorFlow DType.75
Cannot convert the argument `type_value`: 'sum' to a TensorFlow DType.50
Cannot convert the argument `type_value`: 'sum' to a TensorFlow DType.75
Cannot convert the argument `type_value`: 'valid' to a TensorFlow DType.50
Cannot convert the argument `type_value`: 'valid' to a TensorFlow DType.75
Cannot convert the argument `type_value`: 'zeros' to a TensorFlow DType.50
Cannot convert the argument `type_value`: 'zeros' to a TensorFlow DType.75
Exception encountered when calling layer "" "                 f"(type PReLU).
Exception encountered when calling layer "1" "                 f"(type PReLU).
Exception encountered when calling layer "p_re_lu" "                 f"(type PReLU).
Exception encountered when calling layer "same" "                 f"(type PReLU).
Exception encountered when calling layer "sum" "                 f"(type PReLU).
Exception encountered when calling layer "valid" "                 f"(type PReLU).
Exception encountered when calling layer "zeros" "                 f"(type PReLU).
Unknown initializer: . Please ensure this object is passed to the `custom_objects` argument. See https://www.tensorflow.org/guide/keras/save_and_serialize#registering_the_custom_object for details.50
Unknown initializer: . Please ensure this object is passed to the `custom_objects` argument. See https://www.tensorflow.org/guide/keras/save_and_serialize#registering_the_custom_object for details.75
Unknown initializer: 1. Please ensure this object is passed to the `custom_objects` argument. See https://www.tensorflow.org/guide/keras/save_and_serialize#registering_the_custom_object for details.50
Unknown initializer: 1. Please ensure this object is passed to the `custom_objects` argument. See https://www.tensorflow.org/guide/keras/save_and_serialize#registering_the_custom_object for details.75
Unknown initializer: same. Please ensure this object is passed to the `custom_objects` argument. See https://www.tensorflow.org/guide/keras/save_and_serialize#registering_the_custom_object for details.50
Unknown initializer: same. Please ensure this object is passed to the `custom_objects` argument. See https://www.tensorflow.org/guide/keras/save_and_serialize#registering_the_custom_object for details.75
Unknown initializer: sum. Please ensure this object is passed to the `custom_objects` argument. See https://www.tensorflow.org/guide/keras/save_and_serialize#registering_the_custom_object for details.50
Unknown initializer: sum. Please ensure this object is passed to the `custom_objects` argument. See https://www.tensorflow.org/guide/keras/save_and_serialize#registering_the_custom_object for details.75
Unknown initializer: valid. Please ensure this object is passed to the `custom_objects` argument. See https://www.tensorflow.org/guide/keras/save_and_serialize#registering_the_custom_object for details.50
Unknown initializer: valid. Please ensure this object is passed to the `custom_objects` argument. See https://www.tensorflow.org/guide/keras/save_and_serialize#registering_the_custom_object for details.75
Value for attr 'T' of bool is not in the list of allowed values: float, double, int32, uint8, int16, int8, int64, bfloat16, uint16, half, uint32, uint64, qint8
Value for attr 'T' of complex128 is not in the list of allowed values: float, double, int32, uint8, int16, int8, int64, bfloat16, uint16, half, uint32, uint64, qint8
Value for attr 'T' of complex64 is not in the list of allowed values: float, double, int32, uint8, int16, int8, int64, bfloat16, uint16, half, uint32, uint64, qint8
Value for attr 'T' of uint16 is not in the list of allowed values: bfloat16, half, float, double, int8, int16, int32, int64, complex64, complex128
Value for attr 'T' of uint32 is not in the list of allowed values: bfloat16, half, float, double, int8, int16, int32, int64, complex64, complex128
Value for attr 'T' of uint64 is not in the list of allowed values: bfloat16, half, float, double, int8, int16, int32, int64, complex64, complex128
Value for attr 'T' of uint8 is not in the list of allowed values: bfloat16, half, float, double, int8, int16, int32, int64, complex64, complex128
cannot compute Mul as input #1(zero-based) was expected to be a float tensor but is a int16 tensor [Op:Mul]
cannot compute Mul as input #1(zero-based) was expected to be a float tensor but is a int32 tensor [Op:Mul]
cannot compute Mul as input #1(zero-based) was expected to be a float tensor but is a int64 tensor [Op:Mul]
cannot compute Mul as input #1(zero-based) was expected to be a float tensor but is a int8 tensor [Op:Mul]
list assignment index out of range77

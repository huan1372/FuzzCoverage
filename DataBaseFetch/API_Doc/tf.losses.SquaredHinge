Help on class SquaredHinge in module keras.losses:
class SquaredHinge(LossFunctionWrapper)
|  SquaredHinge(reduction='auto', name='squared_hinge')
|
|  Computes the squared hinge loss between `y_true` and `y_pred`.
|
|  `loss = square(maximum(1 - y_true * y_pred, 0))`
|
|  `y_true` values are expected to be -1 or 1. If binary (0 or 1) labels are
|  provided we will convert them to -1 or 1.
|
|  Standalone usage:
|
|  >>> y_true = [[0., 1.], [0., 0.]]
|  >>> y_pred = [[0.6, 0.4], [0.4, 0.6]]
|  >>> # Using 'auto'/'sum_over_batch_size' reduction type.
|  >>> h = tf.keras.losses.SquaredHinge()
|  >>> h(y_true, y_pred).numpy()
|  1.86
|
|  >>> # Calling with 'sample_weight'.
|  >>> h(y_true, y_pred, sample_weight=[1, 0]).numpy()
|  0.73
|
|  >>> # Using 'sum' reduction type.
|  >>> h = tf.keras.losses.SquaredHinge(
|  ...     reduction=tf.keras.losses.Reduction.SUM)
|  >>> h(y_true, y_pred).numpy()
|  3.72
|
|  >>> # Using 'none' reduction type.
|  >>> h = tf.keras.losses.SquaredHinge(
|  ...     reduction=tf.keras.losses.Reduction.NONE)
|  >>> h(y_true, y_pred).numpy()
|  array([1.46, 2.26], dtype=float32)
|
|  Usage with the `compile()` API:
|
|  ```python
|  model.compile(optimizer='sgd', loss=tf.keras.losses.SquaredHinge())
|  ```
|
|  Method resolution order:
|      SquaredHinge
|      LossFunctionWrapper
|      Loss
|      builtins.object
|
|  Methods defined here:
|
|  __init__(self, reduction='auto', name='squared_hinge')
|      Initializes `SquaredHinge` instance.
|
|      Args:
|        reduction: Type of `tf.keras.losses.Reduction` to apply to
|          loss. Default value is `AUTO`. `AUTO` indicates that the reduction
|          option will be determined by the usage context. For almost all cases
|          this defaults to `SUM_OVER_BATCH_SIZE`. When used with
|          `tf.distribute.Strategy`, outside of built-in training loops such as
|          `tf.keras` `compile` and `fit`, using `AUTO` or
|          `SUM_OVER_BATCH_SIZE` will raise an error. Please see this custom
|          training [tutorial](
|          https://www.tensorflow.org/tutorials/distribute/custom_training) for
|          more details.
|        name: Optional name for the instance. Defaults to 'squared_hinge'.
|
|  ----------------------------------------------------------------------
|  Methods inherited from LossFunctionWrapper:
|
|  call(self, y_true, y_pred)
|      Invokes the `LossFunctionWrapper` instance.
|
|      Args:
|        y_true: Ground truth values.
|        y_pred: The predicted values.
|
|      Returns:
|        Loss values per sample.
|
|  get_config(self)
|      Returns the config dictionary for a `Loss` instance.
|
|  ----------------------------------------------------------------------
|  Class methods inherited from LossFunctionWrapper:
|
|  from_config(config) from builtins.type
|      Instantiates a `Loss` from its config (output of `get_config()`).
|
|      Args:
|          config: Output of `get_config()`.
|
|      Returns:
|          A `keras.losses.Loss` instance.
|
|  ----------------------------------------------------------------------
|  Methods inherited from Loss:
|
|  __call__(self, y_true, y_pred, sample_weight=None)
|      Invokes the `Loss` instance.
|
|      Args:
|        y_true: Ground truth values. shape = `[batch_size, d0, .. dN]`, except
|          sparse loss functions such as sparse categorical crossentropy where
|          shape = `[batch_size, d0, .. dN-1]`
|        y_pred: The predicted values. shape = `[batch_size, d0, .. dN]`
|        sample_weight: Optional `sample_weight` acts as a coefficient for the
|          loss. If a scalar is provided, then the loss is simply scaled by the
|          given value. If `sample_weight` is a tensor of size `[batch_size]`,
|          then the total loss for each sample of the batch is rescaled by the
|          corresponding element in the `sample_weight` vector. If the shape of
|          `sample_weight` is `[batch_size, d0, .. dN-1]` (or can be
|          broadcasted to this shape), then each loss element of `y_pred` is
|          scaled by the corresponding value of `sample_weight`. (Note
|          on`dN-1`: all loss functions reduce by 1 dimension, usually
|          axis=-1.)
|
|      Returns:
|        Weighted loss float `Tensor`. If `reduction` is `NONE`, this has
|          shape `[batch_size, d0, .. dN-1]`; otherwise, it is scalar. (Note
|          `dN-1` because all loss functions reduce by 1 dimension, usually
|          axis=-1.)
|
|      Raises:
|        ValueError: If the shape of `sample_weight` is invalid.
|
|  ----------------------------------------------------------------------
|  Data descriptors inherited from Loss:
|
|  __dict__
|      dictionary for instance variables (if defined)
|
|  __weakref__
|      list of weak references to the object (if defined)

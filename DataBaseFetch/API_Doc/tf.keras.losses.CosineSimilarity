Help on class CosineSimilarity in module keras.losses:
class CosineSimilarity(LossFunctionWrapper)
|  CosineSimilarity(axis=-1, reduction='auto', name='cosine_similarity')
|
|  Computes the cosine similarity between labels and predictions.
|
|  Note that it is a number between -1 and 1. When it is a negative number
|  between -1 and 0, 0 indicates orthogonality and values closer to -1
|  indicate greater similarity. The values closer to 1 indicate greater
|  dissimilarity. This makes it usable as a loss function in a setting
|  where you try to maximize the proximity between predictions and targets.
|  If either `y_true` or `y_pred` is a zero vector, cosine similarity will be 0
|  regardless of the proximity between predictions and targets.
|
|  `loss = -sum(l2_norm(y_true) * l2_norm(y_pred))`
|
|  Standalone usage:
|
|  >>> y_true = [[0., 1.], [1., 1.]]
|  >>> y_pred = [[1., 0.], [1., 1.]]
|  >>> # Using 'auto'/'sum_over_batch_size' reduction type.
|  >>> cosine_loss = tf.keras.losses.CosineSimilarity(axis=1)
|  >>> # l2_norm(y_true) = [[0., 1.], [1./1.414, 1./1.414]]
|  >>> # l2_norm(y_pred) = [[1., 0.], [1./1.414, 1./1.414]]
|  >>> # l2_norm(y_true) . l2_norm(y_pred) = [[0., 0.], [0.5, 0.5]]
|  >>> # loss = mean(sum(l2_norm(y_true) . l2_norm(y_pred), axis=1))
|  >>> #       = -((0. + 0.) +  (0.5 + 0.5)) / 2
|  >>> cosine_loss(y_true, y_pred).numpy()
|  -0.5
|
|  >>> # Calling with 'sample_weight'.
|  >>> cosine_loss(y_true, y_pred, sample_weight=[0.8, 0.2]).numpy()
|  -0.0999
|
|  >>> # Using 'sum' reduction type.
|  >>> cosine_loss = tf.keras.losses.CosineSimilarity(axis=1,
|  ...     reduction=tf.keras.losses.Reduction.SUM)
|  >>> cosine_loss(y_true, y_pred).numpy()
|  -0.999
|
|  >>> # Using 'none' reduction type.
|  >>> cosine_loss = tf.keras.losses.CosineSimilarity(axis=1,
|  ...     reduction=tf.keras.losses.Reduction.NONE)
|  >>> cosine_loss(y_true, y_pred).numpy()
|  array([-0., -0.999], dtype=float32)
|
|  Usage with the `compile()` API:
|
|  ```python
|  model.compile(optimizer='sgd',
|                loss=tf.keras.losses.CosineSimilarity(axis=1))
|  ```
|
|  Args:
|    axis: The axis along which the cosine similarity is computed
|      (the features axis). Defaults to -1.
|    reduction: Type of `tf.keras.losses.Reduction` to apply to loss.
|      Default value is `AUTO`. `AUTO` indicates that the reduction option will
|      be determined by the usage context. For almost all cases this defaults
|      to `SUM_OVER_BATCH_SIZE`. When used with `tf.distribute.Strategy`,
|      outside of built-in training loops such as `tf.keras` `compile` and
|      `fit`, using `AUTO` or `SUM_OVER_BATCH_SIZE` will raise an error. Please
|      see this custom training [tutorial](
|      https://www.tensorflow.org/tutorials/distribute/custom_training) for
|      more details.
|    name: Optional name for the instance.
|
|  Method resolution order:
|      CosineSimilarity
|      LossFunctionWrapper
|      Loss
|      builtins.object
|
|  Methods defined here:
|
|  __init__(self, axis=-1, reduction='auto', name='cosine_similarity')
|      Initializes `LossFunctionWrapper` class.
|
|      Args:
|        fn: The loss function to wrap, with signature `fn(y_true, y_pred,
|          **kwargs)`.
|        reduction: Type of `tf.keras.losses.Reduction` to apply to
|          loss. Default value is `AUTO`. `AUTO` indicates that the reduction
|          option will be determined by the usage context. For almost all cases
|          this defaults to `SUM_OVER_BATCH_SIZE`. When used with
|          `tf.distribute.Strategy`, outside of built-in training loops such as
|          `tf.keras` `compile` and `fit`, using `AUTO` or
|          `SUM_OVER_BATCH_SIZE` will raise an error. Please see this custom
|          training [tutorial](
|          https://www.tensorflow.org/tutorials/distribute/custom_training) for
|          more details.
|        name: Optional name for the instance.
|        **kwargs: The keyword arguments that are passed on to `fn`.
|
|  ----------------------------------------------------------------------
|  Methods inherited from LossFunctionWrapper:
|
|  call(self, y_true, y_pred)
|      Invokes the `LossFunctionWrapper` instance.
|
|      Args:
|        y_true: Ground truth values.
|        y_pred: The predicted values.
|
|      Returns:
|        Loss values per sample.
|
|  get_config(self)
|      Returns the config dictionary for a `Loss` instance.
|
|  ----------------------------------------------------------------------
|  Class methods inherited from LossFunctionWrapper:
|
|  from_config(config) from builtins.type
|      Instantiates a `Loss` from its config (output of `get_config()`).
|
|      Args:
|          config: Output of `get_config()`.
|
|      Returns:
|          A `keras.losses.Loss` instance.
|
|  ----------------------------------------------------------------------
|  Methods inherited from Loss:
|
|  __call__(self, y_true, y_pred, sample_weight=None)
|      Invokes the `Loss` instance.
|
|      Args:
|        y_true: Ground truth values. shape = `[batch_size, d0, .. dN]`, except
|          sparse loss functions such as sparse categorical crossentropy where
|          shape = `[batch_size, d0, .. dN-1]`
|        y_pred: The predicted values. shape = `[batch_size, d0, .. dN]`
|        sample_weight: Optional `sample_weight` acts as a coefficient for the
|          loss. If a scalar is provided, then the loss is simply scaled by the
|          given value. If `sample_weight` is a tensor of size `[batch_size]`,
|          then the total loss for each sample of the batch is rescaled by the
|          corresponding element in the `sample_weight` vector. If the shape of
|          `sample_weight` is `[batch_size, d0, .. dN-1]` (or can be
|          broadcasted to this shape), then each loss element of `y_pred` is
|          scaled by the corresponding value of `sample_weight`. (Note
|          on`dN-1`: all loss functions reduce by 1 dimension, usually
|          axis=-1.)
|
|      Returns:
|        Weighted loss float `Tensor`. If `reduction` is `NONE`, this has
|          shape `[batch_size, d0, .. dN-1]`; otherwise, it is scalar. (Note
|          `dN-1` because all loss functions reduce by 1 dimension, usually
|          axis=-1.)
|
|      Raises:
|        ValueError: If the shape of `sample_weight` is invalid.
|
|  ----------------------------------------------------------------------
|  Data descriptors inherited from Loss:
|
|  __dict__
|      dictionary for instance variables (if defined)
|
|  __weakref__
|      list of weak references to the object (if defined)
